@using Client.Services.Interfaces
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div>
    <div class="d-flex flex-column flex-md-row flex-sm-column align-content-sm-center justify-content-around mb-medium">
        <div>
            <h7>Sort by Price:</h7>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="sortPrice" id="sortPriceDefault" value="none" checked @onclick='() => SortByPrice("none")'>
                <label class="form-check-label" for="sortPriceDefault">
                    Default
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="sortPrice" id="sortPriceAsc" value="asc" @onclick='() => SortByPrice("asc")'>
                <label class="form-check-label" for="sortPriceAsc">
                    Low to High
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="sortPrice" id="sortPriceDesc" value="desc" @onclick='() => SortByPrice("desc")'>
                <label class="form-check-label" for="sortPriceDesc">
                    High to Low
                </label>
            </div>
        </div>
        <div>
            <h7 class="mt-4 mt-md-0 mt-sm-0">Filter by Genre:</h7>
            <!-- Radio button for no genre selection -->
            <div class="form-check">
                <input class="form-check-input" type="radio" name="genreFilter" id="genreAll" value="" @onclick="() => UpdateFilteredBooksByGenre(null)" checked>
                <label class="form-check-label" for="genreAll">
                    All Genres
                </label>
            </div>
            <!-- Radio buttons for available genres -->
            @foreach (var genre in Genres)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="genreFilter" id="@($"genre_{genre}")"
                           value="@genre" @onclick="() => UpdateFilteredBooksByGenre(genre)">
                    <label class="form-check-label" for="@($"genre_{genre}")">
                        @genre
                    </label>
                </div>
            }
        </div>
    </div>

    <div class="text-center">
        <button class="btn btn-secondary mt-3" @onclick="ClearFilters">Clear Filters</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<string> OnSort { get; set; }

    [Parameter]
    public EventCallback<string?> OnFilterByGenres { get; set; }

    public List<string> Genres { get; set; } = new List<string>();

    [Inject] private ICatalogService Service { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Genres = (await Service.Get("genre")).OrderBy(g => g).ToList(); // Sort genres alphabetically
        StateHasChanged();
    }

    private async Task SortByPrice(string sortOrder)
    {
        await OnSort.InvokeAsync(sortOrder);
    }

    private async Task UpdateFilteredBooksByGenre(string? selectedGenre)
    {
        // Encode the genre to prevent issues with special characters
        string queryString = selectedGenre != null ? Uri.EscapeDataString(selectedGenre) : null;
        await OnFilterByGenres.InvokeAsync(queryString);
    }

    private async Task ClearFilters()
    {
        await JSRuntime.InvokeAsync<object>("resetRadioButtons", null); // Ensure to reset any radio button states
        await OnFilterByGenres.InvokeAsync("clear");
    }
}

