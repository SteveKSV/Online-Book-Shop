@page "/checkout"
@using Client.Models
@using Client.Services.Interfaces
@inject NavigationManager Navigation

<h1>Checkout</h1>
@if (IsOrderSuccessful)
{
    <h2 id="successMessage">Order is successful!</h2>
}
@if (Basket.Items.Any())
{
    <h2>Shopping Cart Summary</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Basket.Items)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                    <td>@(item.Price * item.Quantity)</td>
                </tr>
            }
        </tbody>
    </table>
    <div>Total Price: @Basket.TotalPrice</div>

    <EditForm Model="BasketCheckout" OnValidSubmit="PlaceOrder" @key="BasketCheckout.UserName">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Delivery Information</h2>
        <div>
            <label for="firstName">First Name:</label>
            <InputText id="firstName" @bind-Value="BasketCheckout.FirstName" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.FirstName)" />
        </div>
        <div>
            <label for="lastName">Last Name:</label>
            <InputText id="lastName" @bind-Value="BasketCheckout.LastName" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.LastName)" />
        </div>
        <div>
            <label for="email">Email Address:</label>
            <InputText id="email" @bind-Value="BasketCheckout.EmailAddress" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.EmailAddress)" />
        </div>
        <div>
            <label for="addressLine">Address Line:</label>
            <InputText id="addressLine" @bind-Value="BasketCheckout.AddressLine" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.AddressLine)" />
        </div>
        <div>
            <label for="country">Country:</label>
            <InputText id="country" @bind-Value="BasketCheckout.Country" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.Country)" />
        </div>
        <div>
            <label for="state">State:</label>
            <InputText id="state" @bind-Value="BasketCheckout.State" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.State)" />
        </div>
        <div>
            <label for="zipCode">Zip Code:</label>
            <InputText id="zipCode" @bind-Value="BasketCheckout.ZipCode" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.ZipCode)" />
        </div>

        <h2>Payment Information</h2>
        <div>
            <label for="cardName">Card Name:</label>
            <InputText id="cardName" @bind-Value="BasketCheckout.CardName" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.CardName)" />
        </div>
        <div>
            <label for="cardNumber">Card Number:</label>
            <InputText id="cardNumber" @bind-Value="BasketCheckout.CardNumber" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.CardNumber)" />
        </div>
        <div>
            <label for="expiration">Expiration:</label>
            <InputText id="expiration" @bind-Value="BasketCheckout.Expiration" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.Expiration)" />
        </div>
        <div>
            <label for="cvv">CVV:</label>
            <InputText id="cvv" @bind-Value="BasketCheckout.CVV" class="form-control" />
            <ValidationMessage For="@(() => BasketCheckout.CVV)" />
        </div>

        <button type="submit" class="btn btn-primary">Place Order</button>
    </EditForm>
}
else
{
    <p>Your shopping cart is empty.</p>
}

@code {
    public bool IsOrderSuccessful { get; set; } = false; 
    public ShoppingCart Basket { get; set; } = new ShoppingCart();
    public DeliveryInfo Delivery { get; set; } = new DeliveryInfo();
    [Inject] public IShoppingCartService Service { get; set; }
    [Inject] public IOrderService OrderService { get; set; }
    public BasketCheckout BasketCheckout { get; set; } = new BasketCheckout();
    protected override async Task OnInitializedAsync()
    {
        await LoadBasket();
    }

    protected async Task LoadBasket()
    {
        Basket = await Service.GetCart();
    }
    private async Task PlaceOrder()
    {
        BasketCheckout.UserName = Basket.UserName;
        BasketCheckout.Quantity = Basket.Items.Sum(item => item.Quantity);
        BasketCheckout.TotalPrice = Basket.TotalPrice;
        await OrderService.PlaceOrder(BasketCheckout);

        IsOrderSuccessful = true;
        StateHasChanged();
        Navigation.NavigateTo("/checkout#successMessage");

        await Task.Delay(5000);
        // Order placed successfully, maybe redirect to a confirmation page
        Navigation.NavigateTo("/", true);
        StateHasChanged();

    }
    // private async Task PlaceOrder()
    // {
    //     // Construct order object with basket items and delivery information
    //     var order = new CheckoutOrder
    //     {   
    //         OrderDto = new Order
    //         {
    //                 UserName = Basket.UserName,
    //                 TotalPrice = Basket.TotalPrice,
    //                 Quantity = Basket.Items.Sum(item => item.Quantity),
    //                 FirstName = Delivery.FirstName,
    //                 LastName = Delivery.LastName,
    //                 EmailAddress = Delivery.EmailAddress,
    //                 AddressLine = Delivery.AddressLine,
    //                 Country = Delivery.Country,
    //                 State = Delivery.State,
    //                 ZipCode = Delivery.ZipCode,
    //                 CardName = Delivery.CardName,
    //                 CardNumber = Delivery.CardNumber,
    //                 Expiration = Delivery.Expiration,
    //                 CVV = Delivery.CVV,
    //                 PaymentMethod = Delivery.PaymentMethod,
    //                 Items = Basket.Items.Select(item => new OrderItem
    //                 {
    //                     ProductId = item.ProductId,
    //                     Quantity = item.Quantity,
    //                     Price = item.Price
    //                 }).ToList()
    //         }
    //     };

    //     // Send the order to the Order.API
    //     var result = await OrderService.PlaceOrder(order);

    //     // Handle the result as needed
    //     if (result != null)
    //     {
    //         IsOrderSuccessful = true;
    //         StateHasChanged();
    //         Navigation.NavigateTo("/checkout#successMessage");

    //         await Task.Delay(5000);
    //         // Order placed successfully, maybe redirect to a confirmation page
    //         Navigation.NavigateTo("/");
    //     }
    //     else
    //     {
    //         // Order placement failed, display an error message
    //     }
    // }
}